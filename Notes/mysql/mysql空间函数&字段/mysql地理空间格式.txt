1.Geometry相关类
	
		Point 点
		LineString 线
		Polygon 多边形（可以是实心，也可以是空心）
		MultiPoint、MultiLineString、MultiPolygon、GeometryCollection 集合类（多个点、多个线、多个多边形）
		 
	
2.集合对象在Mysql中的数据格式
	mysql中有3种表达几何对象的格式：
		WKT(文本格式)
		WKB(二进制格式)
		Mysql内部存储格式
	
3.WKT
	Point
	　POINT(121.213342 31.234532)
	 经度在前，纬度在后，用空格分隔
	
	LineString
	 LINESTRING(121.342423 31.542423,121.345664 31.246790,121.453178 31.456862)
	 点与点之间用逗号分隔；一个点中的经纬度用空格分隔，与POINT格式一致
	 
	Polygon
	 POLYGON((121.342423 31.542423,121.345664 31.246790,121.453178 31.456862),(121.563633 31.566652,121.233565 31.234565,121.568756 31.454367))
	 由一个表示外部边界的LineString和0个或多个表示内部边界的LineString组成，最简单的就是只有一个外边界的情况：POLYGON((0 0,10,0 10 10, 0 10))
	 
	集合类
		MULTIPOINT(0 0, 20 20, 60 60)
	　　MULTILINESTRING((10 10, 20 20), (15 15, 30 15))
	　　MULTIPOLYGON(((0 0,10 0,10 10,0 10,0 0)),((5 5,7 5,7 7,5 7, 5 5)))
	　　GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))
	
4.集合对象创建函数

	MySQL表中的几何对象有它自己的内部格式，我们需要将几何对象从方便输入的WKT格式转换为其内部格式，才能进行进一步的存储，计算等。

	GeomFromText(wkt): 创建一个任何类型的几何对象Geometry

　　PointFromText(wkt): 创建一个Point对象

　　LineStringFromText(wkt): 创建一个LineString对象

　　PolygonFromText(wkt): 创建一个Polygon对象

5.创建支持空间几何对象的表 （引擎需要使用MyISAM）
	
	CREATE TABLE `t_geo_test` (
　　　　`ID` int(11) NOT NULL AUTO_INCREMENT,
　　　　`NAME` varchar(64) NOT NULL,
　　　　`SHAPE` geometry NOT NULL,
　　　　PRIMARY KEY (`ID`)
　　) ENGINE=MyISAM AUTO_INCREMENT=10 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC
	
6.插入数据
		插入点数据
		INSERT INTO `t_geo_test` (ID,NAME,SHAPE) VALUES (1, 'P1', geomFromText('POINT(121.474103 31.232862)'));
		
		插入线数据
		INSERT INTO `t_geo_test` (ID,NAME,SHAPE) VALUES (2, 'L1', geomFromText('LINESTRING(121.474103 31.232862,121.472462 31.231339,121.471984 31.232821)'));
	
		插入多边形数据
		INSERT INTO `t_geo_test` (ID,NAME,SHAPE) VALUES (5, 'POLYGON_1', geomfromtext('POLYGON((121.474243 31.234504, 121.471775 31.233348, 121.470724 31.23155, 121.471603 31.230229, 121.472655 31.230357, 121.475777 31.232045, 121.474243 31.234504))'));
	  
		获取数据
		 AsText(): 此函数能将几何对象的内部存储格式转换为WKT格式
		 
7.常用函数
	获取几何对象属性的函数；
		#1.Geometry
		
		  1) Dimension(g)
           返回对象g的维数
		   
		  2) Envelope(g)
		   返回对象g的最小边界矩形（MBR）。结类型为Polygon值。
		   
		  3) GeometryType(g)
		   以字符串形式返回几何类型的名称，如POINT,LINESTRING
		  
		  4) IsClosed(g)
			返回对象g是否封闭
			
		  5) IsSimple(g)
		    返回对象g是否简单
		  
		#2.Point
		   1) X(p)
			 以双精度数值返回点p的X坐标值(经度)。
		
		   2) Y(p)
		     以双精度数值返回点p的Y坐标值(纬度)。
			 
		#3.LineString
		   1)EndPoint(line)
		     返回对象line的最后一个点Point
		   
		   2)StartPoint(line)
		     返回对象line的第一个点Point
		   
		   3)PointN(line, N)
	         返回对象line中第N个点，N从1开始
		#4.Polygon
			
		   1)ExteriorRing(poly)
		    返回对象poly的外环，类型为LineString
		   
		   2)InteriorRingN(poly, N)
		   返回对象poly的第N个内环，N从1开始
		   
		   3)NumInteriorRings(poly)
			返回对象poly的内环个数
			
8.从现成几何对象创建新的对象

		1)st_union(g1, g2)
		
		将g1和g2合并为一个集合类对象
		
		　SET @g1 = geomFromText('POLYGON((121.474243 31.234504,121.471775 31.233348,121.470724 31.23155,121.471603 31.230229,121.472655 31.230357,121.475777 31.232045,121.474243 31.234504))');
　　	  SET @g2 = geomFromText('POLYGON((121.474243 31.234804,121.471775 31.233948,121.471724 31.23155,121.471903 31.230229,121.472655 31.230157,121.475777 31.231045,121.474243 31.234804))');

　　	  SELECT st_union(@g1, @g2);

		  结果：
　　	  POLYGON((121.472655 31.230157, 121.471903 31.230229, 121.471898134093 31.2302649098516, 121.471603 31.230229, 121.470724 31.23155, 121.471761757556 31.2333253454665, 121.471775 31.233948, 121.474243 31.234804, 121.474597 31.2339365384615, 121.475777 31.232045, 121.475442678789 31.2318642395248, 121.475777 31.231045, 121.472655 31.230157))
			
		2)st_difference(g1, g2)
		
		返回几何对象，该对象表示了几何值g1与g2的点集合差异
		
		 SET @g1 = geomFromText('POLYGON((121.474243 31.234504,121.471775 31.233348,121.470724 31.23155,121.471603 31.230229,121.472655 31.230357,121.475777 31.232045,121.474243 31.234504))');
     　　SET @g2 = geomFromText('POLYGON((121.474243 31.234804,121.471775 31.233948,121.471724 31.23155,121.471903 31.230229,121.472655 31.230157,121.475777 31.231045,121.474243 31.234804))');
	 
　　     SELECT st_difference(@g1,@g2);

		 结果：
     　　MULTIPOLYGON(((121.471603 31.230229, 121.470724 31.23155, 121.471761757556 31.2333253454665, 121.471724 31.23155, 121.471898134093 31.2302649098516, 121.471603 31.230229)), ((121.475442678789 31.2318642395248, 121.474597 31.2339365384615, 121.475777 31.232045, 121.475442678789 31.2318642395248)))
	   
	    3)st_intersection(g1,g2)
		
		返回几何对象，该对象表示了几何值g1与g2的点集合交集
			SET @g1 = geomFromText('POLYGON((121.474243 31.234504,121.471775 31.233348,121.470724 31.23155,121.471603 31.230229,121.472655 31.230357,121.475777 31.232045,121.474243 31.234504))');
		　　SET @g2 = geomFromText('POLYGON((121.474243 31.234804,121.471775 31.233948,121.471724 31.23155,121.471903 31.230229,121.472655 31.230157,121.475777 31.231045,121.474243 31.234804))');

		　　SELECT st_intersection(@g1,@g2);

		　　结果：

		　　POLYGON((121.471898134093 31.2302649098516, 121.471724 31.23155, 121.471761757556 31.2333253454665, 121.471775 31.233348, 121.474243 31.234504, 121.474597 31.2339365384615, 121.475442678789 31.2318642395248, 121.472655 31.230357, 121.471898134093 31.2302649098516))
		
		
9.几何对象之间空间关系的函数
		1)st_contains(g1, g2)
		返回1: g1完全包含g2；
		返回0: g1未包含g2
		
		2)st_crosses(g1, g2), st_intersects(g1, g2)
		返回1: g1与g2相交；
		返回0:g1与g2未相交
		
		
		3)st_disjoint(g1, g2)
		是st_crosses的反函数
		
		4)st_within(g1, g2)
		  g1在g2内则返回1，否则返回0
		
		
10. 空间索引

	对表中的geometry类型的字段进行索引可以优化搜索，MySQL中通过对Geometry对象的MBR创建索引

	创建：

	CREATE SPATIAL INDEX i_shape ON `t_geo_test`(SHAPE);

	删除：

	DROP INDEX i_shape ON `t_geo_test`;
		
		
11.注意事项

	1）目前MySQL中支持的空间坐标系统没有gcj02,bd09等国内坐标系，默认使用WGS84地球坐标系，所以在创建几何对象时输入的坐标值尽量使用WGS84坐标，以避免误差。

	2）MySQL中的计算距离，长度，面积等绝对数值的空间计算函数（area(), GLength(), st_distance()）存在一定的误差，尽量不要使用。
			
			
		
		
		
		
		
		
		
		
		
		
		
		
		