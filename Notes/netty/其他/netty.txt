1.Channel

	Channel：一个客户端与服务器通信的通道
	
	ChannelHandler：核心业务就在这里，用于处理业务请求，
				分为
				ChannelInboundHandle:输入数据处理器
				ChannelOutboundHandler：输出业务处理器
				
	ChannelHandlerContext 通信管道的上下文，用于传输业务数据
	ChannelPipeline  用于保存处理过程需要用到ChannelHandler和ChannelHandlerContext
	
	
	Channel分类：
		
		NioSocketChannel	异步非阻塞的客户端TCP Socket连接。
		NioServerSocketChannel	异步非阻塞的服务器端TCP Socket连接。
		NioDatagramChannel	异步非阻塞的UDP连接。
		NioSctpChannel	异步的客户端（Stream Control Transmission Protocol，流控制传输协议）连接。
		NioSctpServerChannel	异步的Sctp服务器端连接。
		OioSocketChannel	同步阻塞的客户端TCP Socket连接。
		OioServerSocketChannel	同步阻塞的服务器端TCP Socket连接。
		OioDatagramChannel	同步阻塞的UDP连接。
		OioSctpChannel	同步的Sctp服务器端连接。
		OioSctpServerChanner	同步的客户端TCP Socket连接。
	
	
2.ByteBuf
	是一个存储字节的容器，最大的特点就是使用方便，它既有自己的读索引和写索引，方便你对整段字节缓存进行读写，也支持get/set,方便你对其中每一个字节进行读写
	
	它有三种模式：
		1）Heap Buffer堆缓冲区
			堆缓冲区是ByteBuf最常用的模式，它将数据存储在堆空间
		2）Direct Buffer直接缓冲区	
			直接缓冲区是ByteBuf的另一种常用模式，它的内存分配都不发生在堆，Jdk1.4引入的nio的ByteBuffer类允许jvm通过本地调用分配内存，这样做有两个好处：
				一：通过免去中间交换的内存拷贝，提升IO处理速度；直接缓冲区的内容可以驻留在垃圾回收扫描的堆区以外
				二：DirectBuffer在 -XX:MaxDirectMemorySize=xxM大小限制下，使用Heap之外的内存，GC对此“无能为力”，也就意味着规避了在高负荷下频繁GC过程对应用线程的中断影响
		3）Composite Buffer复合缓冲区
			复合缓冲区相当于多个不同的ByteBuf的视图，这是netty提供的，jdk不提供这样的共呢个
		
3.Codec
	Netty中的编码/解码器，通过它你能完成字节余pojo，Pojo与pojo的相互转换，从而达到自定义协议的目的
	
	
	Encoder:
		最重要的实现类是MessageToByteEncoder<T>
		这个类的作用就是将消息实体T从对象转换成byte，写入到ByteBuf，然后再丢给剩下的ChannelOutboundHandler传给客户端
		
	Decoder：
		decoder就是在服务端收到数据的时候，将字节流转换为实体对象Message。但是和Encoder的处理逻辑不一样，数据传到服务端有可能不是一次请求就能完成的，中间可能需要经过几次数据传输，并且每一次传输传多少数据也是不确定的，所以它有两个重要方法：
			decode     默认是调用decode
			decodeLast 只有在Channel的生命周期结束之前会调用一次
	
		常用解码器：ReplayingDecoder
		
			​ ReplayingDecoder 是 byte-to-message 解码的一种特殊的抽象基类，读取缓冲区的数据之前需要检查缓冲区是否有足够的字节，使用ReplayingDecoder就无需自己检查；若ByteBuf中有足够的字节，则会正常读取；若没有足够的字节则会停止解码
			
				checkpoint方法：
				state方法：


		